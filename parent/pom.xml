<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <groupId>org.libs4j.ui5.sample</groupId>
  <artifactId>maven-openui5-sample-parent</artifactId>
  <packaging>pom</packaging>
  <version>1.0-SNAPSHOT</version>
  <name>OpenUI5 Maven Sample Parent</name>
  <url>http://maven.apache.org</url>
  <dependencyManagement>
    <dependencies>
		<dependency>
			<groupId>org.webjars</groupId>
			<artifactId>openui5</artifactId>
			<version>1.32.10</version>
		</dependency>
	</dependencies>
  </dependencyManagement>
  <build>
	   <pluginManagement>
		<plugins>
		  <plugin>
			<groupId>com.github.eirslett</groupId>
			<artifactId>frontend-maven-plugin</artifactId>
			<!-- Use the latest released version:
			https://repo1.maven.org/maven2/com/github/eirslett/frontend-maven-plugin/ -->
			<version>0.0.27</version>
			<executions>
			  <execution>
				<!-- optional: you don't really need execution ids,
				but it looks nice in your build log. -->
				<id>install node and npm</id>
				<goals>
				  <goal>install-node-and-npm</goal>
				</goals>
				<!-- optional: default phase is "generate-resources" -->
				<phase>generate-resources</phase>
			  </execution>
			  <execution>
				<id>npm install</id>
				<goals>
				  <goal>npm</goal>
				</goals>

				<!-- optional: default phase is "generate-resources" -->
				<phase>generate-resources</phase>

				<configuration>
				  <!-- optional: The default argument is actually
				  "install", so unless you need to run some other npm command,
				  you can remove this whole <configuration> section.
				  -->
				  <arguments>install</arguments>
				</configuration>
			  </execution>
			  <execution>
				<id>bower install</id>
				<goals>
				  <goal>bower</goal>
				</goals>

				<configuration>
				  <!-- optional: The default argument is actually
				  "install", so unless you need to run some other bower command,
				  you can remove this whole <configuration> section.
				  -->
				  <arguments>install</arguments>
				</configuration>
			  </execution>
			  <execution>
				<id>grunt build</id>
				<goals>
				  <goal>gulp</goal>
				</goals>

				<!-- optional: the default phase is "generate-resources" -->
				<phase>generate-resources</phase>

				<configuration>
				  <!-- optional: if not specified, it will run Grunt's default
				  task (and you can remove this whole <configuration> section.) -->
				  <arguments>default</arguments>
				</configuration>
			  </execution>
			  <execution>
				<id>javascript tests</id>
				<goals>
				  <goal>karma</goal>
				</goals>

				<!-- optional: the default plase is "test". Some developers
				choose to run karma in the "integration-test" phase. -->
				<phase>test</phase>

				<configuration>
				  <!-- optional: the default is "karma.conf.js" in your working directory -->
				  <karmaConfPath>karma.ci.conf.js</karmaConfPath>
				</configuration>
			  </execution>
			</executions>
			<configuration>
			  <nodeVersion>v4.2.1</nodeVersion>
			  <npmVersion>2.14.7</npmVersion>
			  <installDirectory>target</installDirectory>

			</configuration>
		  </plugin>
		  <plugin>
			<artifactId>maven-clean-plugin</artifactId>
			<version>3.0.0</version>
			<configuration>
			  <filesets>
				<fileset>
				  <directory>node_modules</directory>
				  <followSymlinks>false</followSymlinks>
				</fileset>
				<fileset>
				  <directory>bower_components</directory>
				  <followSymlinks>false</followSymlinks>
				</fileset>
			  </filesets>
			</configuration>
		  </plugin>

		  <plugin>
			<groupId>org.apache.maven.plugins</groupId>
			<artifactId>maven-war-plugin</artifactId>
			<version>2.6</version>
			<configuration>
			  <webResources>
				<resource>
				  <!-- this is relative to the pom.xml directory -->
				  <directory>target/dist/webapp</directory>
				</resource>
			  </webResources>
			</configuration>
		  </plugin>
		  
		  <plugin>
			<groupId>org.apache.maven.plugins</groupId>
			<artifactId>maven-surefire-plugin</artifactId>
			<version>2.19.1</version>
			<executions>
			  <!-- This is a workaround to get Jenkins to publish Karma test results when running a Maven project: we run 0 surefire tests, so Jenkins publishes the report of the Karma tests. -->
			  <execution>
				<id>dummySureFire</id>
				<phase>test</phase>
				<goals>
				  <goal>test</goal>
				</goals>
			  </execution>
			</executions>
		  </plugin>

		</plugins>
	  
	  </pluginManagement>
  
  </build>
  

</project>
